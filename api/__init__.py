# -*- coding: utf-8 -*-

"""
Module for API (FastAPI)

Can start from console: uvicorn --host 127.0.0.1 --port 3100 api:app --workers 1

:var api_cfg: Configurations of API
:type api_cfg: ApiConfig
:var api_logger: Object for logging
:type api_logger: logging.Logger
:var api_logger_cfg: Configuration for logger
:type api_logger_cfg: ApiConfig
:var postgresql_cfg: An instance of PostgreSQLConfig used for configuring PostgreSQL settings
:type postgresql_cfg: PostgreSQLConfig
:var postgres_logger_cfg: An instance of PostgreSQLLoggingConfig used for configuring PostgreSQL logging settings
:type postgres_logger_cfg: PostgreSQLLoggingConfig
:var postgres_logger: A logger for PostgreSQL interactions, configured using postgres_logger_cfg settings
:type postgres_logger: logging.Logger
:var bd: An instance of ClientPotgreSQL with PostgreSQLConfig settings and PostgreSQL logger
:type bd: ClientPotgreSQL
:var app: Object of FastAPI
:type app: FastAPI
"""

from fastapi import FastAPI
from fastapi import Request
from fastapi import Response

from postgresql import ClientPostgreSQL
from .core.config import ApiConfig
from .core.config import ApiLoggingConfig
from .core.config import PostgreSQLLoggingConfig
from .core.config import PostgreSQLConfig
from .core.logger import get_logger
from utils.helper import get_log
from app.utils.templates.requests import table_requests

async def log_stuff(request: Request, call_next: callable) -> Response:
    """
    Middleware function that logs information about incoming requests and their responses.

    :param request: The incoming request object.
    :type request: Request
    :param call_next: The callable representing the next middleware or endpoint in the chain.
    :type call_next: Callable
    :returns: The response generated by the next middleware or endpoint.
    :rtype: Response
    """

    response = await call_next(request)
    api_logger.info(get_log(s = "=", text = f"{request.client.host}:{request.client.port} - {request.method} {request.url} with code {response.status_code}"))
    return response

api_cfg = ApiConfig()
api_logger_cfg = ApiLoggingConfig()
api_logger = get_logger(**api_logger_cfg.dict())

postgresql_cfg = PostgreSQLConfig()
postgres_logger_cfg = PostgreSQLLoggingConfig()
postgres_logger = get_logger(**postgres_logger_cfg.dict())
bd = ClientPostgreSQL(postgresql_cfg.dict(), postgres_logger)

app = FastAPI()
app.logger = api_logger





